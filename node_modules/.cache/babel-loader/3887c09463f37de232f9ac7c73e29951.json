{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Projects\\\\Smart-contract\\\\intro-smart-contract\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const contractABI = abi.abi;\n  const contractAddress = \"0x94ECab2b9EF51AD380cb21C709b0b8041F1D01a1\";\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\r\n  * Implement your connectWallet method here\r\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        /*\r\n         * Store our data in React State\r\n         */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Hey there!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), currentAccount && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addinput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"connected\",\n    onClick: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Connected to:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"wallet address\",\n    defaultValue: currentAccount,\n    className: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  })), allWaves.map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, \"Message: \", wave.message));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","contractABI","contractAddress","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","connectWallet","alert","getAllWaves","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","setAllWaves","allWaves","map","index","backgroundColor","marginTop","padding","toString"],"sources":["C:/Users/user/Desktop/Projects/Smart-contract/intro-smart-contract/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/WavePortal.json\";\r\n\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  const contractABI = abi.abi;\r\n\r\n  const contractAddress = \"0x94ECab2b9EF51AD380cb21C709b0b8041F1D01a1\";\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        let wavesCleaned = [];\r\n        waves.forEach(wave => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message\r\n          });\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n\r\n  return (\r\n\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet} >\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {currentAccount && (\r\n          <div className=\"addinput\">\r\n            <button className=\"connected\" onClick={null} >\r\n              Connected to:\r\n            </button>\r\n            <input type=\"text\" placeholder=\"wallet address\" defaultValue={currentAccount} className=\"address\" />\r\n          </div>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <div>Message: {wave.message}</div>\r\n            </div>)\r\n        })}\r\n        <div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}